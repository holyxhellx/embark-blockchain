{
  "_args": [
    [
      {
        "raw": "embark@../",
        "scope": null,
        "escapedName": "embark",
        "name": "embark",
        "rawSpec": "../",
        "spec": "/Users/iurimatias/Projects/embark-framework",
        "type": "directory"
      },
      "/Users/iurimatias/Projects/embark-framework/test_app"
    ]
  ],
  "_from": "..",
  "_id": "embark@2.3.0",
  "_inCache": true,
  "_location": "/embark",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "crypto-js": "3.1.8",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "graceful-fs": "4.1.11",
    "jsonfile": "2.4.0",
    "klaw": "1.3.1",
    "lodash": "4.17.4",
    "lodash.assign": "4.2.0",
    "memorystream": "0.3.1",
    "os-locale": "1.4.0",
    "path-is-absolute": "1.0.1",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-from-string": "1.2.1",
    "require-main-filename": "1.0.1",
    "rimraf": "2.6.0",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "utf8": "2.1.2",
    "which-module": "1.0.0",
    "window-size": "0.2.0",
    "xhr2": "0.1.4",
    "xmlhttprequest": "1.8.0",
    "y18n": "3.2.1",
    "yargs-parser": "2.4.1"
  },
  "_requested": {
    "raw": "embark@../",
    "scope": null,
    "escapedName": "embark",
    "name": "embark",
    "rawSpec": "../",
    "spec": "/Users/iurimatias/Projects/embark-framework",
    "type": "directory"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "file:..",
  "_shasum": "9593f8e4b182d46501c6975c6fd50defb8883d1c",
  "_shrinkwrap": null,
  "_spec": "embark@../",
  "_where": "/Users/iurimatias/Projects/embark-framework/test_app",
  "author": {
    "name": "Iuri Matias",
    "email": "iuri.matias@gmail.com"
  },
  "bin": {
    "embark": "./bin/embark"
  },
  "bugs": {
    "url": "https://github.com/iurimatias/embark-framework/issues"
  },
  "contributors": [],
  "dependencies": {
    "async": "^2.0.1",
    "bignumber.js": "github:debris/bignumber.js#master",
    "blessed": "^0.1.81",
    "chokidar": "^1.6.0",
    "colors": "^1.1.2",
    "commander": "^2.8.1",
    "finalhandler": "^0.5.0",
    "fs-extra": "^2.0.0",
    "globule": "^1.1.0",
    "merge": "^1.2.0",
    "serve-static": "^1.11.1",
    "shelljs": "^0.5.0",
    "solc": "0.4.8",
    "toposort": "^1.0.0",
    "web3": "^0.18.2"
  },
  "description": "Embark is a framework that allows you to easily develop and deploy DApps",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-mocha-test": "^0.13.2",
    "matchdep": "^1.0.1",
    "mocha": "^3.2.0",
    "mocha-sinon": "^1.1.4",
    "sinon": "^1.15.4",
    "toposort": "^1.0.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "gitHead": "d1701c403126f9485ebb7e9972076a6352cad93e",
  "homepage": "https://github.com/iurimatias/embark-framework",
  "keywords": [
    "ethereum",
    "dapps",
    "ipfs",
    "orbit",
    "solidity",
    "solc",
    "blockchain",
    "serverless"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "embark",
  "optionalDependencies": {},
  "readme": "[![Join the chat at https://gitter.im/iurimatias/embark-framework](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/iurimatias/embark-framework?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build\nStatus](https://travis-ci.org/iurimatias/embark-framework.svg?branch=develop)](https://travis-ci.org/iurimatias/embark-framework)\n[![Code Climate](https://codeclimate.com/github/iurimatias/embark-framework/badges/gpa.svg)](https://codeclimate.com/github/iurimatias/embark-framework)\n\nWhat is Embark\n======\n\nEmbark is a framework that allows you to easily develop and deploy Decentralized Applications (DApps).\n\nA Decentralized Application is serverless html5 application that uses one or more decentralized technologies.\n\nEmbark currently integrates with EVM blockchains (Ethereum), Decentralized Storages (IPFS), and Decentralizaed communication platforms (Whisper and Orbit). Swarm is supported for deployment.\n\nWith Embark you can:\n\n**Blockchain (Ethereum)**\n* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the dapp.\n* Do Test Driven Development with Contracts using Javascript.\n* Keep track of deployed contracts, deploy only when truly needed.\n* Manage different chains (e.g testnet, private net, livenet)\n* Easily manage complex systems of interdependent contracts.\n\n**Decentralized Storage (IPFS)**\n* Easily Store & Retrieve Data on the DApp through EmbarkJS. Includin uploading and retrieving files.\n* Deploy the full application to IPFS or Swarm.\n\n\n**Decentralized Communication (Whisper, Orbit)**\n* Easily send/receive messages through channels in P2P through Whisper or Orbit.\n\n**Web Technologies**\n* Integrate with any web technology including React, Foundation, etc..\n* Use any build pipeline or tool you wish, including grunt and meteor. (for 1.x, plugins coming soon for 2.x series)\n\nTable of Contents\n======\n* [Installation](#installation)\n* [Usage Demo](#usage---demo)\n* [Dashboard](#dashboard)\n* [Creating a new DApp](#creating-a-new-dapp)\n* [Libraries and APIs available](#libraries-and-languages-available)\n* [Using and Configuring Contracts](#dapp-structure)\n* [EmbarkJS](#embarkjs)\n* [EmbarkJS - Storage (IPFS)](#embarkjs---storage)\n* [EmbarkJS - Communication (Whisper/Orbit)](#embarkjs---communication)\n* [Testing Contracts](#tests)\n* [Working with different chains](#working-with-different-chains)\n* [Custom Application Structure](#structuring-application)\n* [Deploying to IPFS](#deploying-to-ipfs)\n* [Extending Functionality with Plugins](#plugins)\n* [Donations](#donations)\n\nInstallation\n======\nRequirements: geth (1.5.8 or higher), node (6.9.1 or higher is recommended) and npm\nOptional: testrpc (3.0 or higher) if using the simulator or the test functionality.\nFurther: depending on the dapp stack you choose: [IPFS](https://ipfs.io/)\n\n```Bash\n$ npm -g install embark\n\n# If you plan to use the simulator instead of a real ethereum node.\n$ npm -g install ethereumjs-testrpc\n```\n\nSee [Complete Installation Instructions](https://github.com/iurimatias/embark-framework/wiki/Installation).\n\n\n**updating from embark 1**\n\nEmbark's npm package has changed from ```embark-framework``` to ```embark```, this sometimes can create conflicts. To update first uninstall embark-framework 1 to avoid any conflicts. ```npm uninstall -g embark-framework``` then ```npm install -g embark```\n\nUsage - Demo\n======\n\n![Embark Demo screenshot](http://i.imgur.com/a9ddSjn.png)\n\nYou can easily create a sample working DApp with the following:\n\n```Bash\n$ embark demo\n$ cd embark_demo\n```\n\nYou can run a REAL ethereum node for development purposes:\n\n```Bash\n$ embark blockchain\n```\n\nAlternatively, to use an ethereum rpc simulator simply run:\n\n```Bash\n$ embark simulator\n```\n\nBy default embark blockchain will mine a minimum amount of ether and will only mine when new transactions come in. This is quite usefull to keep a low CPU. The option can be configured at ```config/blockchain.json```. Note that running a real node requires at least 2GB of free ram, please take this into account if running it in a VM.\n\nThen, in another command line:\n\n```Bash\n$ embark run\n```\nThis will automatically deploy the contracts, update their JS bindings and deploy your DApp to a local server at http://localhost:8000\n\nNote that if you update your code it will automatically be re-deployed, contracts included. There is no need to restart embark, refreshing the page on the browser will do.\n\nDashboard\n=====\n\nEmbark 2 comes with a terminal dashboard.\n\n![Dashboard](http://i.imgur.com/s4OQZpu.jpg)\n\nThe dashboard will tell you the state of your contracts, the enviroment you are using, and what embark is doing at the moment.\n\n**available services**\n\nAvailable Services will display the services available to your dapp in green, if one of these is down then it will be displayed in red.\n\n**logs and console**\n\nThere is a console at the bottom which can be used to interact with contracts or with embark itself. type ```help``` to see a list of available commands, more commands will be added with each version of Embark.\n\nCreating a new DApp\n======\n\nIf you want to create a blank new app.\n\n```Bash\n$ embark new AppName\n$ cd AppName\n```\n\nDApp Structure\n======\n\n```Bash\n  app/\n    |___ contracts/ #solidity or serpent contracts\n    |___ html/\n    |___ css/\n    |___ js/\n  config/\n    |___ blockchain.json #environments configuration\n    |___ contracts.json  #contracts configuration\n  test/\n    |___ #contracts tests\n```\n\nSolidity/Serpent files in the contracts directory will automatically be deployed with embark run. Changes in any files will automatically be reflected in app, changes to contracts will result in a redeployment and update of their JS Bindings\n\nLibraries and languages available\n======\n\nEmbark can build and deploy contracts coded in Solidity. It will make them available on the client side using EmbarkJS and Web3.js.\n\nFurther documentation for these can be found below:\n\n* Smart Contracts: [Solidity](https://solidity.readthedocs.io/en/develop/) and [Serpent](https://github.com/ethereum/wiki/wiki/Serpent)\n* Client Side: [Web3.js](https://github.com/ethereum/wiki/wiki/JavaScript-API) and [EmbarkJS](#embarkjs)\n\nUsing Contracts\n======\nEmbark will automatically take care of deployment for you and set all needed JS bindings. For example, the contract below:\n\n```Javascript\n# app/contracts/simple_storage.sol\npragma solidity ^0.4.7;\ncontract SimpleStorage {\n  uint public storedData;\n\n  function SimpleStorage(uint initialValue) {\n    storedData = initialValue;\n  }\n\n  function set(uint x) {\n    storedData = x;\n  }\n  function get() constant returns (uint retVal) {\n    return storedData;\n  }\n}\n```\nWill automatically be available in Javascript as:\n\n```Javascript\n# app/js/index.js\nSimpleStorage.set(100);\nSimpleStorage.get().then(function(value) { console.log(value.toNumber()) });\nSimpleStorage.storedData().then(function(value) { console.log(value.toNumber()) });\n```\n\nYou can specify for each contract and environment its gas costs and arguments:\n\n```Json\n# config/contracts.json\n{\n  \"development\": {\n    \"gas\": \"auto\",\n    \"contracts\": {\n      \"SimpleStorage\": {\n        \"args\": [\n          100\n        ]\n      }\n    }\n  }\n}\n```\n\nIf you are using multiple contracts, you can pass a reference to another contract as ```$ContractName```, Embark will automatically replace this with the correct address for the contract.\n\n\n```Json\n# config/contracts.json\n{\n  ...\n  \"development\": {\n    \"contracts\": {\n      \"SimpleStorage\": {\n        \"args\": [\n          100,\n          $MyStorage\n        ]\n      },\n      \"MyStorage\": {\n        \"args\": [\n          \"initial string\"\n        ]\n      },\n      \"MyMainContract\": {\n        \"args\": [\n          $SimpleStorage\n        ]\n      }\n    }\n  }\n  ...\n}\n```\n\nYou can now deploy many instances of the same contract. e.g\n\n\n```Json\n# config/contracts.json\n{\n  \"development\": {\n    \"contracts\": {\n      \"Currency\": {\n        \"deploy\": false,\n        \"args\": [\n          100\n        ]\n      },\n      \"Usd\": {\n        \"instanceOf\": \"Currency\",\n        \"args\": [\n          200\n        ]\n      },\n      \"MyCoin\": {\n        \"instanceOf\": \"Currency\",\n        \"args\": [\n          200\n        ]\n      }\n    }\n  }\n}\n  ...\n```\n\nContracts addresses can be defined, If an address is defined the contract wouldn't be deployed but its defined address will be used instead.\n\n\n```Json\n# config/contracts.json\n{\n  ...\n  \"development\": {\n    \"contracts\": {\n      \"UserStorage\": {\n        \"address\": \"0x123456\"\n      },\n      \"UserManagement\": {\n        \"args\": [\n          \"$UserStorage\"\n        ]\n      }\n    }\n  }\n  ...\n}\n```\n\nEmbarkJS\n======\n\nEmbarkJS is a javascript library meant to abstract and facilitate the development of DApps.\n\n**promises**\n\nmethods in EmbarkJS contracts will be converted to promises.\n\n```Javascript\n  var myContract = new EmbarkJS.Contract({abi: abiObject, address: \"0x123\"});\n  myContract.get().then(function(value) { console.log(\"value is \" + value.toNumber) });\n```\n\n**deployment**\n\nClient side deployment will be automatically available in Embark for existing contracts:\n\n```Javascript\n  SimpleStorage.deploy().then(function(anotherSimpleStorage) {});\n```\n\nor it can be manually definied as\n\n```Javascript\n  var myContract = new EmbarkJS.Contract({abi: abiObject, code: code});\n  myContract.deploy().then(function(anotherMyContractObject) {});\n```\n\nEmbarkJS - Storage\n======\n\n**initialization**\n\nThe current available storage is IPFS. it can be initialized as\n\n```Javascript\n  EmbarkJS.Storage.setProvider('ipfs',{server: 'localhost', port: '5001'})\n```\n\n**Saving Text**\n\n```Javascript\n  EmbarkJS.Storage.saveText(\"hello world\").then(function(hash) {});\n```\n\n**Retrieving Data/Text**\n\n```Javascript\n  EmbarkJS.Storage.get(hash).then(function(content) {});\n```\n\n**Uploading a file**\n\n```HTML\n  <input type=\"file\">\n```\n\n```Javascript\n  var input = $(\"input[type=file\"]);\n  EmbarkJS.Storage.uploadFile(input).then(function(hash) {});\n```\n\n**Generate URL to file**\n\n```Javascript\n  EmbarkJS.Storage.getUrl(hash);\n```\n\nEmbarkJS - Communication\n======\n\n**initialization**\n\nFor Whisper:\n\n```Javascript\n    EmbarkJS.Messages.setProvider('whisper')\n```\n\nFor Orbit:\n\nYou'll need to use IPFS from master and run it as: ```ipfs daemon --enable-pubsub-experiment```\n\nthen set the provider:\n\n```Javascript\n  EmbarkJS.Messages.setProvider('orbit', {server: 'localhost', port: 5001})\n```\n\n**listening to messages**\n\n```Javascript\n  EmbarkJS.Messages.listenTo({topic: [\"topic1\", \"topic2\"]}).then(function(message) { console.log(\"received: \" + message); })\n```\n\n**sending messages**\n\nyou can send plain text\n\n```Javascript\n  EmbarkJS.Messages.sendMessage({topic: \"sometopic\", data: 'hello world'})\n```\n\nor an object\n\n```Javascript\n  EmbarkJS.Messages.sendMessage({topic: \"sometopic\", data: {msg: 'hello world'}})\n```\n\nnote: array of topics are considered an AND. In Whisper you can use another array for OR combinations of several topics e.g ```[\"topic1\", [\"topic2\", \"topic3\"]]``` => ```topic1 AND (topic2 OR topic 3)```\n\nTests\n======\n\nYou can run specs with ```embark test```, it will run any test files under ```test/```.\n\nEmbark includes a testing lib to fastly run & test your contracts in a EVM.\n\n```Javascript\n# test/simple_storage_spec.js\n\nvar assert = require('assert');\nvar Embark = require('embark');\nvar EmbarkSpec = Embark.initTests();\nvar web3 = EmbarkSpec.web3;\n\ndescribe(\"SimpleStorage\", function() {\n  before(function(done) {\n    var contractsConfig = {\n      \"SimpleStorage\": {\n        args: [100]\n      }\n    };\n    EmbarkSpec.deployAll(contractsConfig, done);\n  });\n\n  it(\"should set constructor value\", function(done) {\n    SimpleStorage.storedData(function(err, result) {\n      assert.equal(result.toNumber(), 100);\n      done();\n    });\n  });\n\n  it(\"set storage value\", function(done) {\n    SimpleStorage.set(150, function() {\n      SimpleStorage.get(function(err, result) {\n        assert.equal(result.toNumber(), 150);\n        done();\n      });\n    });\n  });\n\n});\n```\n\nEmbark uses [Mocha](http://mochajs.org/) by default, but you can use any testing framework you want.\n\nWorking with different chains\n======\nYou can specify which environment to deploy to:\n\n\n```$ embark blockchain livenet```\n\n```$ embark run livenet```\n\nThe environment is a specific blockchain configuration that can be managed at config/blockchain.json\n\n```Json\n# config/blockchain.json\n  ...\n   \"livenet\": {\n    \"networkType\": \"livenet\",\n    \"rpcHost\": \"localhost\",\n    \"rpcPort\": 8545,\n    \"rpcCorsDomain\": \"http://localhost:8000\",\n    \"account\": {\n      \"password\": \"config/livenet/password\"\n    }\n  },\n  ...\n```\n\nStructuring Application\n======\n\nEmbark is quite flexible and you can configure you're own directory structure using ```embark.json```\n\n```Json\n# embark.json\n{\n  \"contracts\": [\"app/contracts/**\"],\n  \"app\": {\n    \"css/app.css\": [\"app/css/**\"],\n    \"images/\": [\"app/images/**\"],\n    \"js/app.js\": [\"embark.js\", \"app/js/**\"],\n    \"index.html\": \"app/index.html\"\n  },\n  \"buildDir\": \"dist/\",\n  \"config\": \"config/\",\n  \"plugins\": {}\n}\n```\n\nDeploying to IPFS and Swarm\n======\n\nTo deploy a dapp to IPFS, all you need to do is run a local IPFS node and then run ```embark upload ipfs```.\nIf you want to deploy to the livenet then after configuring you account on ```config/blockchain.json``` on the ```livenet``` environment then you can deploy to that chain by specifying the environment ```embark ipfs livenet```.\n\nTo deploy a dapp to SWARM, all you need to do is run a local SWARM node and then run ```embark upload swarm```.\n\nPlugins\n======\n\nIt's possible to extend Embarks functionality with plugins. For example the follow is possible:\n\n* plugin to add support for es6, jsx, coffescript, etc (``embark.registerPipeline``)\n* plugin to add standard contracts or a contract framework (``embark.registerContractConfiguration`` and ``embark.addContractFile``)\n* plugin to make some contracts available in all environments for use by other contracts or the dapp itself e.g a Token, a DAO, ENS, etc.. (``embark.registerContractConfiguration`` and ``embark.addContractFile``)\n* plugin to add a libraries such as react or boostrap (``embark.addFileToPipeline``)\n* plugin to specify a particular web3 initialization for special provider uses (``embark.registerClientWeb3Provider``)\n* plugin to create a different contract wrapper (``embark.registerContractsGeneration``)\n* plugin to add new console commands (``embark.registerConsoleCommand``)\n* plugin to add support for another contract language such as viper, LLL, etc (``embark.registerCompiler``)\n\nFor more information on how to develop your own plugin please see the [plugin documentation](http://embark.readthedocs.io/en/latest/plugins.html)\n\nDonations\n======\n\nIf you like Embark please consider donating to 0x8811FdF0F988f0CD1B7E9DE252ABfA5b18c1cDb1\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iurimatias/embark-framework.git"
  },
  "scripts": {
    "test": "grunt jshint && mocha test/ --no-timeouts"
  },
  "version": "2.3.0"
}
